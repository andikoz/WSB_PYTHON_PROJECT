

from plot_utils import plot_results
import Bollinger_band_backtesting
from PyQt5 import QtCore, QtGui, QtWidgets

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(40, 130, 641, 41))
        self.label.setObjectName("label")
        self.label_7 = QtWidgets.QLabel(self.centralwidget)
        self.label_7.setGeometry(QtCore.QRect(230, 330, 241, 70))
        self.label_7.setObjectName("label_7")
        self.widget = QtWidgets.QWidget(self.centralwidget)
        self.widget.setGeometry(QtCore.QRect(101, 221, 95, 100))
        self.widget.setObjectName("widget")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.widget)
        self.verticalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.BTC = QtWidgets.QPushButton(self.widget)
        self.BTC.setObjectName("BTC")
        self.BTC.clicked.connect(self.clickBTC)
        self.verticalLayout_3.addWidget(self.BTC)
        self.ETH = QtWidgets.QPushButton(self.widget)
        self.ETH.setObjectName("ETH")
        self.ETH.clicked.connect(self.clickETH)
        self.verticalLayout_3.addWidget(self.ETH)
        self.BNB = QtWidgets.QPushButton(self.widget)
        self.BNB.setObjectName("BNB")
        self.BNB.clicked.connect(self.clickBNB)
        self.verticalLayout_3.addWidget(self.BNB)
        self.widget1 = QtWidgets.QWidget(self.centralwidget)
        self.widget1.setGeometry(QtCore.QRect(220, 220, 261, 101))
        self.widget1.setObjectName("widget1")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.widget1)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.label_3 = QtWidgets.QLabel(self.widget1)
        self.label_3.setObjectName("label_3")
        self.verticalLayout_2.addWidget(self.label_3)
        self.label_5 = QtWidgets.QLabel(self.widget1)
        self.label_5.setObjectName("label_5")
        self.verticalLayout_2.addWidget(self.label_5)
        self.label_2 = QtWidgets.QLabel(self.widget1)
        self.label_2.setObjectName("label_2")
        self.verticalLayout_2.addWidget(self.label_2)
        self.widget2 = QtWidgets.QWidget(self.centralwidget)
        self.widget2.setGeometry(QtCore.QRect(490, 220, 101, 101))
        self.widget2.setObjectName("widget2")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.widget2)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.buy = QtWidgets.QLabel(self.widget2)
        self.buy.setObjectName("buy")
        self.verticalLayout.addWidget(self.buy)
        self.sell = QtWidgets.QLabel(self.widget2)
        self.sell.setObjectName("sell")
        self.verticalLayout.addWidget(self.sell)
        self.Saldo = QtWidgets.QLabel(self.widget2)
        self.Saldo.setObjectName("Saldo")
        self.verticalLayout.addWidget(self.Saldo)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 951, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:14pt;\">STRATEGIA BOLLINGERA DLA WYBRANEJ KRYPTOWALUTY</span></p></body></html>"))
        self.label_7.setText(_translate("MainWindow", "STAN KONTA POCZATKOWY = 100 USDT"))
        self.BTC.setText(_translate("MainWindow", "BTC"))
        self.ETH.setText(_translate("MainWindow", "ETH"))
        self.BNB.setText(_translate("MainWindow", "BNB"))
        self.label_3.setText(_translate("MainWindow", "ILOSC TRANSAKCJI KUP"))
        self.label_5.setText(_translate("MainWindow", "ILOSC TRANSAKCJI SPRZEDAJ"))
        self.label_2.setText(_translate("MainWindow", "STAN KONTA PO WYKONANIU TRANSAKCJI"))
        self.buy.setText(_translate("MainWindow", "BUY"))
        self.sell.setText(_translate("MainWindow", "SELL"))
        self.Saldo.setText(_translate("MainWindow", "SALDO"))

    def clickBTC(self):
        plot_results( Bollinger_band_backtesting.df, 'BTC', Bollinger_band_backtesting.env.buys, Bollinger_band_backtesting.env.sells)
        self.Saldo.setText(f'{round(Bollinger_band_backtesting.env.balance_amount)} {Bollinger_band_backtesting.env.balance_unit}')
        self.sell.setText(f'{len(Bollinger_band_backtesting.env.sells)}')
        self.buy.setText(f'{len(Bollinger_band_backtesting.env.buys)}')

    def clickETH(self):
        plot_results( Bollinger_band_backtesting.df, 'ETH', Bollinger_band_backtesting.env.buys, Bollinger_band_backtesting.env.sells)
        self.Saldo.setText(f'{round(Bollinger_band_backtesting.env.balance_amount)} {Bollinger_band_backtesting.env.balance_unit}')
        self.sell.setText(f'{len(Bollinger_band_backtesting.env.sells)}')
        self.buy.setText(f'{len(Bollinger_band_backtesting.env.buys)}')

    def clickBNB(self):
        plot_results(Bollinger_band_backtesting.df, 'BNB', Bollinger_band_backtesting.env.buys,Bollinger_band_backtesting.env.sells)
        self.Saldo.setText(f'{round(Bollinger_band_backtesting.env.balance_amount)} {Bollinger_band_backtesting.env.balance_unit}')
        self.sell.setText(f'{len(Bollinger_band_backtesting.env.sells)}')
        self.buy.setText(f'{len(Bollinger_band_backtesting.env.buys)}')

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
